<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Custom Three.js VR Roller Coaster</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=no"
    />
    <style>
      body {
        margin: 0;
        overflow: hidden;
        font-family: Arial, sans-serif;
      }
      #overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        pointer-events: none;
        z-index: 10;
      }
      .button-container {
        pointer-events: auto;
        margin: 10px;
      }
      button {
        padding: 15px 30px;
        font-size: 24px;
        cursor: pointer;
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 8px;
        transition: background-color 0.3s ease;
      }
      button:hover {
        background-color: #45a049;
      }
      #message-display {
        color: white;
        font-size: 36px;
        margin-top: 20px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
        pointer-events: none;
      }
      .webxr-button {
        z-index: 100;
      }
    </style>
  </head>
  <body>
    <div id="overlay">
      <div class="button-container">
        <button id="startButton">Start Roller Coaster</button>
      </div>
      <div id="message-display">Ready to ride!</div>
    </div>

    <script type="module">
      import * as THREE from 'https://cdn.skypack.dev/three@0.128.0/build/three.module.js';
      import {
        RollerCoasterGeometry,
        RollerCoasterShadowGeometry,
        RollerCoasterLiftersGeometry,
        TreesGeometry,
        SkyGeometry,
      } from 'https://cdn.skypack.dev/three@0.128.0/examples/jsm/misc/RollerCoaster.js';
      import { VRButton } from 'https://cdn.skypack.dev/three@0.128.0/examples/jsm/webxr/VRButton.js';

      // Scene setup
      const renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.xr.enabled = true;
      renderer.xr.setReferenceSpaceType('local');
      document.body.appendChild(renderer.domElement);
      document.body.appendChild(VRButton.createButton(renderer));

      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0xf0f0ff);

      const light = new THREE.HemisphereLight(0xfff0f0, 0x606066, 1);
      light.position.set(1, 1, 1);
      scene.add(light);

      const train = new THREE.Object3D();
      scene.add(train);

      const camera = new THREE.PerspectiveCamera(
        50,
        window.innerWidth / window.innerHeight,
        0.1,
        500
      );
      train.add(camera);

      // Custom track definition
      const trackPoints = [
        // Starting station - level
        new THREE.Vector3(0, 10, 0),
        
        // Initial lift hill
        new THREE.Vector3(20, 30, 0),
        new THREE.Vector3(40, 50, 0),
        
        // First major drop
        new THREE.Vector3(60, 45, -20),
        new THREE.Vector3(80, 25, -40),
        new THREE.Vector3(100, 15, -20),
        
        // Helix section
        new THREE.Vector3(120, 20, 0),
        new THREE.Vector3(140, 25, 20),
        new THREE.Vector3(120, 30, 40),
        new THREE.Vector3(100, 35, 20),
        
        // Second hill
        new THREE.Vector3(80, 40, 0),
        new THREE.Vector3(60, 35, -20),
        
        // Final turn back to station
        new THREE.Vector3(40, 20, -40),
        new THREE.Vector3(20, 15, -20),
        new THREE.Vector3(0, 10, 0), // Back to start
      ];

      // Create a smooth curve from the track points
      const curve = new THREE.CatmullRomCurve3(trackPoints, true, 'centripetal');
      
      // Helper function to get point with custom curve implementation
      const customCurve = {
        getPointAt: function(t) {
          return curve.getPointAt(t);
        },
        getTangentAt: function(t) {
          return curve.getTangentAt(t);
        }
      };

      // Environment setup
      const groundGeometry = new THREE.PlaneGeometry(500, 500, 15, 15);
      groundGeometry.rotateX(-Math.PI / 2);

      const positions = groundGeometry.attributes.position.array;
      const vertex = new THREE.Vector3();

      for (let i = 0; i < positions.length; i += 3) {
        vertex.fromArray(positions, i);
        vertex.x += Math.random() * 10 - 5;
        vertex.z += Math.random() * 10 - 5;
        const distance = (vertex.distanceTo(scene.position) / 5) - 25;
        vertex.y = Math.random() * Math.max(0, distance);
        vertex.toArray(positions, i);
      }

      groundGeometry.computeVertexNormals();

      const groundMaterial = new THREE.MeshLambertMaterial({
        color: 0x407000
      });

      const ground = new THREE.Mesh(groundGeometry, groundMaterial);
      scene.add(ground);

      // Trees
      const treesGeometry = new TreesGeometry(ground);
      const treesMaterial = new THREE.MeshBasicMaterial({
        side: THREE.DoubleSide,
        vertexColors: true
      });
      const trees = new THREE.Mesh(treesGeometry, treesMaterial);
      scene.add(trees);

      // Sky
      const skyGeometry = new SkyGeometry();
      const skyMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });
      const sky = new THREE.Mesh(skyGeometry, skyMaterial);
      scene.add(sky);

      // Roller coaster track
      const trackGeometry = new RollerCoasterGeometry(customCurve, 1500);
      const trackMaterial = new THREE.MeshPhongMaterial({
        vertexColors: true
      });
      const track = new THREE.Mesh(trackGeometry, trackMaterial);
      scene.add(track);

      // Support structures
      const liftersGeometry = new RollerCoasterLiftersGeometry(customCurve, 10);
      const liftersMaterial = new THREE.MeshPhongMaterial();
      const lifters = new THREE.Mesh(liftersGeometry, liftersMaterial);
      lifters.position.y = 0.1;
      scene.add(lifters);

      // Track shadows
      const shadowGeometry = new RollerCoasterShadowGeometry(customCurve, 500);
      const shadowMaterial = new THREE.MeshBasicMaterial({
        color: 0x305000,
        depthWrite: false,
        transparent: true
      });
      const shadow = new THREE.Mesh(shadowGeometry, shadowMaterial);
      shadow.position.y = 0.1;
      scene.add(shadow);

      // State variables
      let currentVelocity = 0;
      let currentProgress = 0;
      let coasterState = 'stopped';
      let prevTime = performance.now();
      
      // Physics constants
      const GRAVITY = 11.81; // m/sÂ²
      const TRACK_SCALE = 1; // Scale factor for converting world units to meters
      const FRICTION = 0.000000000001; // Rolling friction coefficient
      const MAX_VELOCITY = 2000000;
      const MIN_VELOCITY = 0.00008;

      // UI Elements
      const startButton = document.getElementById('startButton');
      const messageDisplay = document.getElementById('message-display');

      startButton.addEventListener('click', () => {
        if (coasterState === 'stopped') {
          coasterState = 'running';
          startButton.style.display = 'none';
          messageDisplay.textContent = 'Hold on tight!';
          currentVelocity = MIN_VELOCITY;
        }
      });

      // Animation loop
      function render() {
        const time = performance.now();
        const delta = time - prevTime;

        if (coasterState === 'running') {
          // Update position
          currentProgress += currentVelocity;
          if (currentProgress >= 1) {
            currentProgress = 0;
            coasterState = 'stopped';
            startButton.style.display = 'block';
            messageDisplay.textContent = 'Ready for another ride?';
          }

          // Get current track position and tangent
          const position = customCurve.getPointAt(currentProgress);
          const tangent = customCurve.getTangentAt(currentProgress);

          // Update train position
          position.y += 0.3;
          train.position.copy(position);

          // Calculate physics
          if (coasterState === 'running') {
            // Apply gravity effect based on track slope
            currentVelocity -= tangent.y * 0.0000002 * delta;
            
            // Apply friction
            currentVelocity *= (1 - FRICTION);
            
            // Clamp velocity
            currentVelocity = Math.max(MIN_VELOCITY, Math.min(MAX_VELOCITY, currentVelocity));
          }

          // Update train orientation
          const lookAt = new THREE.Vector3();
          train.lookAt(lookAt.copy(position).sub(tangent));
        }

        renderer.render(scene, camera);
        prevTime = time;
      }

      // Window resize handler
      function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      }

      window.addEventListener('resize', onWindowResize);
      renderer.setAnimationLoop(render);
    </script>
  </body>
</html>
